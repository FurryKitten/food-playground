//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Prefabs/Player/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Tetris"",
            ""id"": ""9aeb4bc4-6b84-45ae-972d-5fb1b5145e38"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""d64487fc-4f36-4126-810c-3c27474bfe4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flip"",
                    ""type"": ""Button"",
                    ""id"": ""49e31160-283e-4104-bacc-0f3339a11f52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceHand"",
                    ""type"": ""Button"",
                    ""id"": ""a4445bac-9c52-437a-8682-adfbdd4ab762"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""a8d482c5-ef51-43b6-bd13-532ae71d012c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""93dc9657-c2c0-42ce-9628-11d406aed192"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a5a54a4-05ca-4878-b82f-401e78630db6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard + mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a12f923f-7f2f-4c23-8880-3096442361df"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard + mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c36710d4-8ae7-4825-bce0-383ecd4caab7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard + mouse"",
                    ""action"": ""Flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""334d8167-b58c-43c0-82fe-4faa059b2040"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard + mouse"",
                    ""action"": ""PlaceHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6cbb9d5-7be6-4ecc-9148-81ffbae9ae43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard + mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard + mouse"",
            ""bindingGroup"": ""keyboard + mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Tetris
        m_Tetris = asset.FindActionMap("Tetris", throwIfNotFound: true);
        m_Tetris_Move = m_Tetris.FindAction("Move", throwIfNotFound: true);
        m_Tetris_Flip = m_Tetris.FindAction("Flip", throwIfNotFound: true);
        m_Tetris_PlaceHand = m_Tetris.FindAction("PlaceHand", throwIfNotFound: true);
        m_Tetris_Dash = m_Tetris.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tetris
    private readonly InputActionMap m_Tetris;
    private List<ITetrisActions> m_TetrisActionsCallbackInterfaces = new List<ITetrisActions>();
    private readonly InputAction m_Tetris_Move;
    private readonly InputAction m_Tetris_Flip;
    private readonly InputAction m_Tetris_PlaceHand;
    private readonly InputAction m_Tetris_Dash;
    public struct TetrisActions
    {
        private @PlayerController m_Wrapper;
        public TetrisActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Tetris_Move;
        public InputAction @Flip => m_Wrapper.m_Tetris_Flip;
        public InputAction @PlaceHand => m_Wrapper.m_Tetris_PlaceHand;
        public InputAction @Dash => m_Wrapper.m_Tetris_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Tetris; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TetrisActions set) { return set.Get(); }
        public void AddCallbacks(ITetrisActions instance)
        {
            if (instance == null || m_Wrapper.m_TetrisActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TetrisActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Flip.started += instance.OnFlip;
            @Flip.performed += instance.OnFlip;
            @Flip.canceled += instance.OnFlip;
            @PlaceHand.started += instance.OnPlaceHand;
            @PlaceHand.performed += instance.OnPlaceHand;
            @PlaceHand.canceled += instance.OnPlaceHand;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(ITetrisActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Flip.started -= instance.OnFlip;
            @Flip.performed -= instance.OnFlip;
            @Flip.canceled -= instance.OnFlip;
            @PlaceHand.started -= instance.OnPlaceHand;
            @PlaceHand.performed -= instance.OnPlaceHand;
            @PlaceHand.canceled -= instance.OnPlaceHand;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(ITetrisActions instance)
        {
            if (m_Wrapper.m_TetrisActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITetrisActions instance)
        {
            foreach (var item in m_Wrapper.m_TetrisActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TetrisActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TetrisActions @Tetris => new TetrisActions(this);
    private int m_keyboardmouseSchemeIndex = -1;
    public InputControlScheme keyboardmouseScheme
    {
        get
        {
            if (m_keyboardmouseSchemeIndex == -1) m_keyboardmouseSchemeIndex = asset.FindControlSchemeIndex("keyboard + mouse");
            return asset.controlSchemes[m_keyboardmouseSchemeIndex];
        }
    }
    public interface ITetrisActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFlip(InputAction.CallbackContext context);
        void OnPlaceHand(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
